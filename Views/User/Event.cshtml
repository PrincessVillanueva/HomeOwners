@{
    ViewData["Title"] = "Event";
}

<style>
    html {
        scroll-behavior: smooth;
        font-family: 'PT Sans Narrow', sans-serif;
        overflow-y: scroll;
        overflow-x: hidden;
    }

        html::-webkit-scrollbar {
            width: 8px;
        }

        html::-webkit-scrollbar-track {
            background: #f0f0f0;
        }

        html::-webkit-scrollbar-thumb {
            background-color: #888;
            border-radius: 4px;
            border: 2px solid #f0f0f0;
        }

    html::-webkit-scrollbar-thumb:hover {
        background-color: #555;
    }

    .front {
        left: 50%;
        transform: translateX(-50%) scale(1);
        z-index: 30;
        opacity: 1;
    }


    .middle-right {
        left: 60%;
        transform: translateX(-50%) scale(0.8);
        z-index: 20;
        opacity: 0.8;
    }

    .back-right {
        left: 70%;
        transform: translateX(-50%) scale(0.6);
        z-index: 10;
        opacity: 0.6;
    }

    .middle-left {
        left: 40%;
        transform: translateX(-50%) scale(0.8);
        z-index: 20;
        opacity: 0.8;
    }

    .back-left {
        left: 30%;
        transform: translateX(-50%) scale(0.6);
        z-index: 10;
        opacity: 0.6;
    }


    .hidden {
        display: none;
    }
    
    .carousel {
        height: 600px;
        position: relative;
    }
    
    .carousel-item {
        width: var(--img-width, 600px);
        height: var(--img-height, 500px);
        transition: all 0.3s ease-in-out;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        object-fit: cover;
    }
    
    .indicator {
        height: 12px;
        width: 12px;
        border-radius: 50%;
        margin: 0 5px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .indicator.active {
        background-color: #4CAF50 !important;
        transform: scale(1.2);
    }
</style>

<div class="bg-gray-100 p-10 mt-[-10px] justify-center">
    <h2 class="text-center mt-20 text-3xl font-bold">
        <span class="inline-block after:content-[''] after:block after:w-15 after:h-1 after:bg-green-500 after:absolute after:left-1/2 after:-translate-x-1/2 after:mt-1">
            March Events
        </span>
    </h2>

    <div class=" relative w-full flex justify-center items-center overflow-hidden carousel">
        <!-- Images with extra wide sizes -->
        <img src="~/image/event1.png" 
             class="absolute object-cover cursor-pointer carousel-item transition-all duration-300 ease-in-out"
             data-width="650" 
             data-height="500">
             
        <img src="~/image/event2.png" 
             class="absolute object-cover cursor-pointer carousel-item transition-all duration-300 ease-in-out"
             data-width="650" 
             data-height="500">
             
        <img src="~/image/event3.png" 
             class="absolute object-cover cursor-pointer carousel-item transition-all duration-300 ease-in-out"
             data-width="650" 
             data-height="500">
             
        <img src="~/image/event1.png" 
             class="absolute object-cover cursor-pointer carousel-item transition-all duration-300 ease-in-out"
             data-width="650" 
             data-height="500">
             
        <img src="~/image/event2.png" 
             class="absolute object-cover cursor-pointer carousel-item transition-all duration-300 ease-in-out"
             data-width="650" 
             data-height="500">
    </div>
    
    <!-- Dynamic image indicators -->
    <div class="flex justify-center mt-8 pb-5 indicators-container">
        <!-- Indicators will be generated by JavaScript -->
    </div>
</div>

<div class="flex flex-row p-10 justify-between items-stretch h-[80vh] min-h-[600px]">
    <!-- Text content - takes minimum necessary width -->
    <div class="flex-1 max-w-[50%] ml-10 my-10">
        <h2 class="text-3xl font-bold relative mb-6 after:content-[''] after:block after:mt-1 after:w-15 after:h-1 after:bg-green-500 after:absolute after:left-0">
            Blooms And Beginnings
        </h2>
        <p class="text-l text-justify pr-20">
            March Wedding Soirée<br><br>
            This March, LendSpace was transformed into a haven of love and elegance for the "Blossoms & Beginnings" wedding celebration. 
            The venue radiated romance with stunning floral arrangements and soft ambient lighting, creating a magical atmosphere for 
            the couple's big day. Guests danced, dined, and celebrated in a space that perfectly combined sophistication and comfort.<br><br>
            Celebrate life's milestones with LendSpace where every detail blooms beautifully.
        </p>
        <button class="mr-12 mt-5 border border-none bg-green-300 rounded-md flex items-center justify-center text-center h-13 w-50 text-white">
            See More →
        </button>
    </div>
    
    <!-- Image container - takes remaining space -->    
    <div class="flex-1 max-w-[50%] h-100 mr-10 my-10">
        <img src="~/image/event4.png" 
             alt="Facility Image 1" 
             class="w-full h-full object-cover rounded-lg shadow-lg">
    </div>
</div>


<div class="flex justify-center ">
    <div class="h-4 w-4 bg-green-300 rounded-full mx-3"></div>
    <div class="h-4 w-4 bg-gray-300 rounded-full mx-3"></div>
    <div class="h-4 w-4 bg-gray-300 rounded-full mx-3"></div>
    <div class="h-4 w-4 bg-gray-300 rounded-full mx-3"></div>
    <div class="h-4 w-4 bg-gray-300 rounded-full mx-3"></div>
    <div class="h-4 w-4 bg-gray-300 rounded-full mx-3 mb-15"></div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const items = document.querySelectorAll('.carousel-item');
        const indicatorsContainer = document.querySelector('.indicators-container');
        let currentIndex = 0;

        items.forEach(item => {
            const width = item.getAttribute('data-width');
            const height = item.getAttribute('data-height');
            if (width) item.style.setProperty('--img-width', `${width}px`);
            if (height) item.style.setProperty('--img-height', `${height}px`);
        });

        items.forEach((_, index) => {
            const indicator = document.createElement('div');
            indicator.className = `indicator ${index === 0 ? 'bg-green-500 active' : 'bg-gray-300'}`;
            indicator.addEventListener('click', () => {
                currentIndex = index;
                updateCarousel();
            });
            indicatorsContainer.appendChild(indicator);
        });
        const indicators = document.querySelectorAll('.indicator');

        const updateCarousel = () => {
            items.forEach((item, index) => {
                item.classList.remove('front', 'middle-right', 'back-right', 'middle-left', 'back-left', 'hidden');
                
                const itemCount = items.length;
                const diff = (index - currentIndex + itemCount) % itemCount;
                
                if (index === currentIndex) {
                    item.classList.add('front');
                } else if (diff === 1 || diff === -itemCount + 1) {
                    item.classList.add('middle-right');
                } else if (diff === 2 || diff === -itemCount + 2) {
                    item.classList.add('back-right');
                } else if (diff === -1 || diff === itemCount - 1) {
                    item.classList.add('middle-left');
                } else if (diff === -2 || diff === itemCount - 2) {
                    item.classList.add('back-left');
                } else {
                    item.classList.add('hidden');
                }
            });

            indicators.forEach((indicator, index) => {
                if (index === currentIndex) {
                    indicator.classList.add('active');
                    indicator.classList.remove('bg-gray-300');
                    indicator.classList.add('bg-green-500');
                } else {
                    indicator.classList.remove('active');
                    indicator.classList.add('bg-gray-300');
                    indicator.classList.remove('bg-green-500');
                }
            });
        };

        items.forEach((item, index) => {
            item.addEventListener('click', () => {
                const itemCount = items.length;
                const diff = (index - currentIndex + itemCount) % itemCount;
                
                if (diff === 1 || diff === -itemCount + 1) {
                    currentIndex = (currentIndex + 1) % itemCount;
                }
                else if (diff === -1 || diff === itemCount - 1) {
                    currentIndex = (currentIndex - 1 + itemCount) % itemCount;
                }
                updateCarousel();
            });
        });

        updateCarousel();
        
        setInterval(() => {
            currentIndex = (currentIndex + 1) % items.length;
            updateCarousel();
        }, 3000);
    });
</script>